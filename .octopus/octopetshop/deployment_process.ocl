step "approve-production-deployment" {
    condition = "Variable"
    name = "Approve Production Deployment"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Trigger.Id}True#{/unless}"
    }

    action {
        action_type = "Octopus.Manual"
        environments = ["production"]
        is_required = true
        notes = "Require approval from someone with the appropriate permissions."
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "True"
            Octopus.Action.Manual.Instructions = "Please add approval notes here."
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "update-database" {
    name = "Update Database"
    properties = {
        Octopus.Action.TargetRoles = "order-entry-db"
    }

    action {
        properties = {
            Flyway.Authentication.Method = "usernamepassword"
            Flyway.Command.BaseLineOnMigrate = "false"
            Flyway.Command.OutOfOrder = "false"
            Flyway.Command.Schemas = "adf"
            Flyway.Command.SkipExecutingMigrations = "false"
            Flyway.Command.Target = "latest"
            Flyway.Command.Value = "migrate"
            Flyway.Database.User = "adsf"
            Flyway.Database.User.Password = "#{Flyway.License.Key}"
            Flyway.Executable.Path = "asdf"
            Flyway.License.Key = "#{Flyway.Database.User.Password}"
            Flyway.Package.Value = "{\"PackageId\":\"RandomQuotes\",\"FeedId\":\"octopus-server-built-in\"}"
            Flyway.Target.Url = "dsf"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Template.Id = "ActionTemplates-2661"
            Octopus.Action.Template.Version = "11"
        }
        worker_pool_variable = ""

        packages "Flyway.Package.Value" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "RandomQuotes"
            properties = {
                Extract = "True"
                PackageParameterName = "Flyway.Package.Value"
                SelectionMode = "deferred"
            }
        }
    }
}

step "deploy-order-service" {
    name = "Deploy Legacy Order Service"
    properties = {
        Octopus.Action.TargetRoles = "order-svc-v2"
    }

    action {
        action_type = "Octopus.IIS"
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.IISWebSite,Octopus.Features.ConfigurationTransforms,Octopus.Features.ConfigurationVariables"
            Octopus.Action.IISWebSite.ApplicationPoolFrameworkVersion = "v4.0"
            Octopus.Action.IISWebSite.ApplicationPoolIdentityType = "ApplicationPoolIdentity"
            Octopus.Action.IISWebSite.ApplicationPoolName = "OrderSvc-AppPool-#{Octopus.Environment.Name}"
            Octopus.Action.IISWebSite.Bindings = "[{\"protocol\":\"http\",\"port\":\"80\",\"host\":\"\",\"thumbprint\":null,\"certificateVariable\":null,\"requireSni\":\"False\",\"enabled\":\"True\"}]"
            Octopus.Action.IISWebSite.CreateOrUpdateWebSite = "True"
            Octopus.Action.IISWebSite.DeploymentType = "webSite"
            Octopus.Action.IISWebSite.EnableAnonymousAuthentication = "True"
            Octopus.Action.IISWebSite.EnableBasicAuthentication = "False"
            Octopus.Action.IISWebSite.EnableWindowsAuthentication = "True"
            Octopus.Action.IISWebSite.StartApplicationPool = "True"
            Octopus.Action.IISWebSite.StartWebSite = "True"
            Octopus.Action.IISWebSite.WebApplication.ApplicationPoolFrameworkVersion = "v4.0"
            Octopus.Action.IISWebSite.WebApplication.ApplicationPoolIdentityType = "ApplicationPoolIdentity"
            Octopus.Action.IISWebSite.WebRootType = "packageRoot"
            Octopus.Action.IISWebSite.WebSiteName = "OrderSvc-#{Octopus.Environment.Name}"
            Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles = "False"
            Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings = "True"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.PackageId = "RandomQuotes"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "RandomQuotes"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "deploy-internal-desktop-application" {
    name = "Deploy Internal Desktop Application"
    properties = {
        Octopus.Action.TargetRoles = "order-entry-desktops"
    }

    action {
        action_type = "Octopus.TentaclePackage"
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.ConfigurationTransforms,Octopus.Features.ConfigurationVariables"
            Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles = "True"
            Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings = "True"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.PackageId = "RandomQuotes"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "RandomQuotes"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "create-web-app-service" {
    name = "Create Web App service"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action "create-web-app-service-azure-discovery" {
        action_type = "Octopus.KubernetesDeployRawYaml"
        notes = <<-EOT
                Create a Load Balancer service for the web app on the target cluster.
                
                This step does cloud target discovery for AKS clusters.
                EOT
        properties = {
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Service
                metadata:
                  name: '#{OctoPetShop.WebApp.ServiceName}'
                  namespace: '#{OctoPetShop.Cluster.Namespace}'
                spec:
                  type: LoadBalancer
                  ports:
                    - name: http
                      port: 80
                      targetPort: #{OctoPetShop.WebApp.HttpPort}
                      protocol: TCP
                    - name: https
                      port: 443
                      targetPort: #{OctoPetShop.WebApp.HttpsPort}
                      protocol: TCP
                  selector:
                    component: web
                    type: main
                
                EOT
            Octopus.Action.KubernetesContainers.Namespace = "#{OctoPetShop.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "OctoPetShop.WorkerPool.Azure"
    }
}

step "deploy-web-app-containers" {
    name = "Deploy Web App containers"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployContainers"
        notes = "Deploy the web app containers to the target cluster."
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.KubernetesService,Octopus.Features.KubernetesSecret"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.Containers = "[{\"Name\":\"web-app\",\"Ports\":[],\"EnvironmentVariables\":[{\"key\":\"ASPNETCORE_ENVIRONMENT\",\"keyError\":null,\"value\":\"#{Octopus.Environment.Name}\",\"valueError\":null,\"option\":\"\",\"optionError\":null,\"option2\":\"\",\"option2Error\":null},{\"key\":\"EnvironmentName\",\"keyError\":null,\"value\":\"#{Octopus.Environment.Name}\",\"valueError\":null,\"option\":\"\",\"optionError\":null,\"option2\":\"\",\"option2Error\":null},{\"key\":\"AppVersion\",\"keyError\":null,\"value\":\"#{Octopus.Release.Number}\",\"valueError\":null,\"option\":\"\",\"optionError\":null,\"option2\":\"\",\"option2Error\":null},{\"key\":\"ShoppingCartServiceBaseUrl\",\"keyError\":null,\"value\":\"#{OctoPetShop.ShoppingCartApi.Url}\",\"valueError\":null,\"option\":\"\",\"optionError\":null,\"option2\":\"\",\"option2Error\":null},{\"key\":\"ProductServiceBaseUrl\",\"keyError\":null,\"value\":\"#{OctoPetShop.ProductApi.Url}\",\"valueError\":null,\"option\":\"\",\"optionError\":null,\"option2\":\"\",\"option2Error\":null},{\"key\":\"ASPNETCORE_URLS\",\"keyError\":null,\"value\":\"http://+:#{OctoPetShop.WebApp.HttpPort}\",\"valueError\":null,\"option\":\"\",\"optionError\":null,\"option2\":\"\",\"option2Error\":null}],\"SecretEnvironmentVariables\":[],\"ConfigMapEnvironmentVariables\":[],\"FieldRefEnvironmentVariables\":[],\"ConfigMapEnvFromSource\":[],\"SecretEnvFromSource\":[],\"VolumeMounts\":[],\"Resources\":{\"requests\":{\"memory\":\"#{OctoPetShop.WebApp.Container.MemoryRequest}\",\"cpu\":\"\",\"ephemeralStorage\":\"\",\"amdGpu\":\"\",\"nvidiaGpu\":\"\",\"storage\":\"\"},\"limits\":{\"memory\":\"#{OctoPetShop.WebApp.Container.MemoryLimit}\",\"cpu\":\"\",\"ephemeralStorage\":\"\",\"amdGpu\":\"\",\"nvidiaGpu\":\"\",\"storage\":\"\"}},\"LivenessProbe\":{\"failureThreshold\":\"\",\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"timeoutSeconds\":\"\",\"type\":\"\",\"exec\":{\"command\":[]},\"httpGet\":{\"host\":\"\",\"path\":\"\",\"port\":\"\",\"scheme\":\"\",\"httpHeaders\":[]},\"tcpSocket\":{\"host\":\"\",\"port\":\"\"}},\"ReadinessProbe\":{\"failureThreshold\":\"\",\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"timeoutSeconds\":\"\",\"type\":\"\",\"exec\":{\"command\":[]},\"httpGet\":{\"host\":\"\",\"path\":\"\",\"port\":\"\",\"scheme\":\"\",\"httpHeaders\":[]},\"tcpSocket\":{\"host\":\"\",\"port\":\"\"}},\"StartupProbe\":{\"failureThreshold\":\"\",\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"timeoutSeconds\":\"\",\"type\":\"\",\"exec\":{\"command\":[]},\"httpGet\":{\"host\":\"\",\"path\":\"\",\"port\":\"\",\"scheme\":\"\",\"httpHeaders\":[]},\"tcpSocket\":{\"host\":\"\",\"port\":\"\"}},\"Command\":[],\"Args\":[],\"SecurityContext\":{\"allowPrivilegeEscalation\":\"\",\"privileged\":\"\",\"readOnlyRootFilesystem\":\"\",\"runAsGroup\":\"\",\"runAsNonRoot\":\"\",\"runAsUser\":\"\",\"capabilities\":{\"add\":[],\"drop\":[]},\"seLinuxOptions\":{\"level\":\"\",\"role\":\"\",\"type\":\"\",\"user\":\"\"}},\"TerminationMessagePath\":\"\",\"TerminationMessagePolicy\":\"\",\"Lifecycle\":{\"PreStop\":null,\"PostStart\":null},\"CreateFeedSecrets\":\"True\"}]"
            Octopus.Action.KubernetesContainers.DeploymentAnnotations = "[{\"key\":\"kubernetes.io/change-cause\",\"keyError\":null,\"value\":\"#{Octopus.Release.Number}\",\"valueError\":null,\"option\":\"\",\"optionError\":null,\"option2\":\"\",\"option2Error\":null}]"
            Octopus.Action.KubernetesContainers.DeploymentLabels = "{\"component\":\"web\",\"type\":\"main\"}"
            Octopus.Action.KubernetesContainers.DeploymentName = "#{OctoPetShop.WebApp.ServiceName}"
            Octopus.Action.KubernetesContainers.DeploymentResourceType = "Deployment"
            Octopus.Action.KubernetesContainers.DeploymentStyle = "RollingUpdate"
            Octopus.Action.KubernetesContainers.DeploymentWait = "NoWait"
            Octopus.Action.KubernetesContainers.IngressAnnotations = "[]"
            Octopus.Action.KubernetesContainers.Namespace = "#{OctoPetShop.Cluster.Namespace}"
            Octopus.Action.KubernetesContainers.PodManagementPolicy = "OrderedReady"
            Octopus.Action.KubernetesContainers.Replicas = "1"
            Octopus.Action.KubernetesContainers.RevisionHistoryLimit = "3"
            Octopus.Action.KubernetesContainers.SecretName = "octopetshop-shoppingcart-secrets"
            Octopus.Action.KubernetesContainers.SecretValues = "{\"ops-connectionstring\":\"#{OctoPetShop.Database.ConnectionString}\"}"
            Octopus.Action.KubernetesContainers.ServiceNameType = "External"
            Octopus.Action.KubernetesContainers.ServiceType = "ClusterIP"
        }
        worker_pool_variable = "OctoPetShop.WorkerPool.Azure"

        packages "web-app" {
            acquisition_location = "NotAcquired"
            feed = "docker-hub"
            package_id = "octopussamples/octopetshop-web"
            properties = {
                Extract = "False"
                PackageParameterName = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "send-completion-notification" {
    condition = "Variable"
    name = "Send Completion Notification"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Trigger.Id}True#{/unless}"
    }

    action {
        action_type = "Octopus.Email"
        environments = ["production"]
        notes = "Email the deployer that the deployment has been completed."
        properties = {
            Octopus.Action.Email.Body = "#{Octopus.Release.Notes}"
            Octopus.Action.Email.IsHtml = "True"
            Octopus.Action.Email.Subject = "Release #{Octopus.Release.Number} has been deployed to #{Octopus.Environment.Name}"
            Octopus.Action.Email.To = "#{Octopus.Deployment.CreatedBy.EmailAddress}"
            Octopus.Action.RunOnServer = "false"
        }
    }
}